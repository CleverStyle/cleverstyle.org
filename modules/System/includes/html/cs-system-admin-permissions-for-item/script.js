// Generated by LiveScript 1.4.0
/**
 * @package    CleverStyle Framework
 * @subpackage System module
 * @category   modules
 * @author     Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright  Copyright (c) 2015-2016, Nazar Mokrynskyi
 * @license    MIT License, see license.txt
 */
(function(){
  Polymer({
    'is': 'cs-system-admin-permissions-for-item',
    behaviors: [cs.Polymer.behaviors.Language('system_admin_permissions_')],
    properties: {
      group: '',
      label: '',
      permissions: Object,
      users: [],
      found_users: [],
      groups: Array
    },
    ready: function(){
      var x$, this$ = this;
      Promise.all([
        cs.api('get api/System/admin/permissions/for_item', {
          group: this.group,
          label: this.label
        }), cs.api('get api/System/admin/groups')
      ]).then(function(arg$){
        var ids, user;
        this$.permissions = arg$[0], this$.groups = arg$[1];
        if (!Object.keys(this$.permissions.users).length) {
          return;
        }
        ids = (function(){
          var results$ = [];
          for (user in this.permissions.users) {
            results$.push(user);
          }
          return results$;
        }.call(this$)).join(',');
        cs.api('get api/System/admin/users', {
          ids: ids
        }).then(function(users){
          this$.set('users', users);
        });
      });
      this.$.form.addEventListener('submit', function(e){
        e.preventDefault();
      });
      x$ = this.$.search;
      x$.addEventListener('keyup', function(e){
        var search, i$, ref$, len$, row;
        search = e.target.value;
        if (e.which !== 13 || !search) {
          return;
        }
        for (i$ = 0, len$ = (ref$ = this$.shadowRoot.querySelectorAll('tr.changed')).length; i$ < len$; ++i$) {
          row = ref$[i$];
          row.classList.remove('changed');
          this$.$.users.insertAdjacentHTML('beforeend', row.outerHTML);
        }
        this$.set('found_users', []);
        cs.api('get api/System/admin/users', {
          search: search
        }).then(function(found_users){
          var ids;
          found_users = found_users.filter(function(user){
            return !this$.shadowRoot.querySelector("[name='users[" + user + "]']");
          });
          if (!found_users.length) {
            cs.ui.notify('404 Not Found', 'warning', 5);
            return;
          }
          ids = found_users.join(',');
          cs.api('get api/System/admin/users', {
            ids: ids
          }).then(function(users){
            this$.set('found_users', users);
          });
        });
      });
      x$.addEventListener('keydown', function(e){
        if (e.which === 13) {
          e.preventDefault();
        }
      });
      this.$['search-results'].addEventListener('click', function(e){
        var tr;
        if (!e.target.matches('[type=radio]')) {
          return;
        }
        tr = e.target.parentElement;
        while (!tr.matches('tr')) {
          tr = tr.parentElement;
        }
        tr.classList.add('changed');
      });
    },
    save: function(){
      var this$ = this;
      cs.api('post api/System/admin/permissions/for_item', this.$.form).then(function(){
        cs.ui.notify(this$.L.changes_saved, 'success', 5);
      });
    },
    invert: function(e){
      var div, radios, i$, len$, radio;
      div = e.currentTarget;
      while (!div.matches('div')) {
        div = div.parentElement;
      }
      radios = Array.prototype.filter.call(div.querySelectorAll("[type=radio]:not([value='-1'])"), function(it){
        return !it.checked;
      });
      for (i$ = 0, len$ = radios.length; i$ < len$; ++i$) {
        radio = radios[i$];
        radio.parentElement.click();
      }
    },
    allow_all: function(e){
      var div, i$, ref$, len$, radio;
      div = e.currentTarget;
      while (!div.matches('div')) {
        div = div.parentElement;
      }
      for (i$ = 0, len$ = (ref$ = div.querySelectorAll("[type=radio][value='1']")).length; i$ < len$; ++i$) {
        radio = ref$[i$];
        radio.parentElement.click();
      }
    },
    deny_all: function(e){
      var div, i$, ref$, len$, radio;
      div = e.currentTarget;
      while (!div.matches('div')) {
        div = div.parentElement;
      }
      for (i$ = 0, len$ = (ref$ = div.querySelectorAll("[type=radio][value='0']")).length; i$ < len$; ++i$) {
        radio = ref$[i$];
        radio.parentElement.click();
      }
    },
    permission_state: function(type, id, expected){
      var permission;
      permission = this.permissions[type][id];
      return permission == expected || (expected == '-1' && permission === undefined);
    },
    group_permission_state: function(id, expected){
      return this.permission_state('groups', id, expected);
    },
    user_permission_state: function(id, expected){
      return this.permission_state('users', id, expected);
    },
    username: function(user){
      return user.username || user.login;
    }
  });
}).call(this);
