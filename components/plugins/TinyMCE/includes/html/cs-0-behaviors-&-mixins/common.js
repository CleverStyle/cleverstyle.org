// Generated by LiveScript 1.4.0
/**
 * @package   TinyMCE
 * @category  plugins
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2015-2016, Nazar Mokrynskyi
 * @license   GNU Lesser General Public License 2.1, see license.txt
 */
(function(){
  var ref$;
  ((ref$ = Polymer.cs.behaviors).TinyMCE || (ref$.TinyMCE = {})).editor = {
    listeners: {
      tap: '_style_fix'
    },
    properties: {
      value: {
        observer: '_value_changed',
        type: String
      }
    },
    attached: function(){
      var this$ = this;
      if (this._init_started) {
        return;
      }
      this._init_started = true;
      this._detached = false;
      if (this._tinymce_editor) {
        this._tinymce_editor.load();
        this._tinymce_editor.remove();
        delete this._tinymce_editor;
      }
      tinymce.init(importAll$({
        target: this.firstElementChild,
        init_instance_callback: function(editor){
          var target;
          this$._tinymce_editor = editor;
          this$._init_started = false;
          if (this$.value !== undefined && this$.value !== editor.getContent()) {
            editor.setContent(this$.value);
            editor.save();
          } else {
            editor.load();
          }
          target = editor.targetElm;
          target._original_focus = target.focus;
          target.focus = bind$(editor, 'focus');
          editor.on('remove', function(){
            target.focus = target._original_focus;
          });
        }
      }, this.editor_config));
    },
    detached: function(){
      var this$ = this;
      if (!this._tinymce_editor) {
        return;
      }
      this._detached = true;
      setTimeout(function(){
        if (this$._detached) {
          this$._tinymce_editor.remove();
          delete this$._tinymce_editor;
        }
      });
    },
    _style_fix: function(){
      var this$ = this;
      Array.prototype.forEach.call(document.querySelectorAll('body > [class^=mce-]'), function(node){
        this$.scopeSubtree(node, true);
      });
    },
    _value_changed: function(){
      if (this._tinymce_editor && this.value !== this._tinymce_editor.getContent()) {
        this._tinymce_editor.setContent(this.value);
        this._tinymce_editor.save();
      }
    }
  };
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
