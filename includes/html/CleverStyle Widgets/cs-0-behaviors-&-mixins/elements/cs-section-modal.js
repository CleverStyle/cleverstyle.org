// Generated by LiveScript 1.4.0
/**
 * @package   CleverStyle Widgets
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2015-2016, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  var body, html;
  body = document.body;
  html = document.documentElement;
  Polymer.cs.behaviors.csSectionModal = [
    Polymer.cs.behaviors['this'], {
      properties: {
        asIs: {
          reflectToAttribute: true,
          type: Boolean
        },
        autoDestroy: Boolean,
        autoOpen: Boolean,
        manualClose: Boolean,
        opened: {
          observer: '_opened_changed',
          reflectToAttribute: true,
          type: Boolean
        }
      },
      listeners: {
        transitionend: '_transitionend',
        'overlay.tap': '_overlay_tap'
      },
      created: function(){
        var this$ = this;
        this._esc_handler = function(e){
          if (e.keyCode === 27 && !this$.manualClose) {
            this$.close();
          }
        };
      },
      attached: function(){
        if (!this._attached_to_html && this.previousElementSibling.tagName === 'BUTTON') {
          this.previousElementSibling.action = 'open';
          this.previousElementSibling.bind = this;
        }
        if (this.autoOpen) {
          this.open();
        }
      },
      _transitionend: function(){
        var ref$;
        if (!this.opened && this.autoDestroy) {
          if ((ref$ = this.parentNode) != null) {
            ref$.removeChild(this);
          }
        }
      },
      _overlay_tap: function(){
        if (!this.manualClose) {
          this.close();
        }
      },
      _opened_changed: function(){
        if (!this._attached_to_html) {
          this._attached_to_html = true;
          html.appendChild(this);
        }
        body.modalOpened = body.modalOpened || 0;
        if (this.opened) {
          document.addEventListener('keydown', this._esc_handler);
          if (this.content) {
            this.innerHTML = this.content;
            this.content = null;
          }
          ++body.modalOpened;
          this.fire('open');
          document.body.setAttribute('modal-opened', '');
        } else {
          document.removeEventListener('keydown', this._esc_handler);
          --body.modalOpened;
          this.fire('close');
          if (!body.modalOpened) {
            document.body.removeAttribute('modal-opened');
          }
        }
      },
      open: function(){
        if (!this.opened) {
          if (!this._attached_to_html) {
            this._attached_to_html = true;
            if (this.parentNode.tagName !== 'HTML') {
              html.appendChild(this);
            }
            setTimeout(bind$(this, 'open'), 0);
          } else {
            this.opened = true;
          }
        }
        return this;
      },
      close: function(){
        if (this.opened) {
          this.opened = false;
        }
        return this;
      }
    }
  ];
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
