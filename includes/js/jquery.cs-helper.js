// Generated by CoffeeScript 1.4.0

/**
 * @package		UIkit Helper
 * @author		Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright	Copyright (c) 2013-2014, Nazar Mokrynskyi
 * @license		MIT License, see license.txt
*/


(function() {

  (function($, UI) {
    var helpers;
    helpers = {
      /**
      		 * Tabs with UIkit
      		 *
      		 * Required DOM structure *+*, where first element contains list of tabs, and second element content of each tab, plugin must be applied to the first element
      */

      tabs: function() {
        if (!this.length) {
          return this;
        }
        return this.each(function() {
          var $this, content;
          $this = $(this);
          content = $this.next();
          $this.addClass('uk-tab').attr('data-uk-tab', '').children().each(function() {
            var li;
            li = $(this);
            if (!li.children('a').length) {
              return li.wrapInner('<a />');
            }
          }).first().addClass('uk-active');
          $this.data('tab', UI.tab($this, {
            connect: content
          }));
          content.addClass('uk-switcher uk-margin').children(':first').addClass('uk-active');
          return content.data('switcher', UI.switcher(content));
        });
      },
      /**
      		 * Dialog with UIkit
      		 *
      		 * Required DOM structure * > *, plugin must be applied to the root element
      		 * If child element is not present - content will be automatically wrapped with <div>
      */

      modal: function(mode) {
        if (!this.length) {
          return this;
        }
        mode = mode || 'init';
        return this.each(function() {
          var $this, content, modal;
          $this = $(this);
          if (!$this.data('modal')) {
            content = $this.children();
            if (!content.length) {
              content = $this.wrapInner('<div />').children();
            }
            content.addClass('uk-modal-dialog uk-modal-dialog-slide');
            if ($this.is('[data-modal-frameless]')) {
              content.addClass('uk-modal-dialog-frameless');
            }
            if ($this.attr('title')) {
              $('<h3 />').html($this.attr('title')).prependTo(content);
            }
            if (content.attr('title')) {
              $('<h3 />').html(content.attr('title')).prependTo(content);
            }
            $this.addClass('uk-modal').data('modal', UI.modal($this));
          }
          modal = $this.data('modal');
          switch (mode) {
            case 'show':
              return modal.show();
            case 'hide':
              return modal.hide();
          }
        });
      }
    };
    /**
    	 * cs helper registration or running (if no parameters specified)
    	 *
    	 * @param {string}		name
    	 * @param {function}	helper
    */

    $.fn.cs = function(name, helper) {
      var func, public_helpers;
      if (name && helper) {
        helpers[name] = helper;
        return this;
      }
      public_helpers = {};
      for (name in helpers) {
        func = helpers[name];
        public_helpers[name] = func.bind(this);
      }
      return public_helpers;
    };
    return $.cs = {
      /**
      		 * Simple wrapper around $(...).cs().modal() with inner form
      		 *
      		 * All content will be inserted into modal form, optionally it is possible to add close button and set width
      		 *
      		 * @return jQuery Root modal element, it is possible to use .cs().modal() on it and listen for events
      */

      simple_modal: function(content, close, width) {
        var style;
        if (close == null) {
          close = false;
        }
        style = width ? ' style="width:' + width + 'px;"' : '';
        close = close ? "<a class=\"uk-modal-close uk-close\"></a>" : '';
        return $("<div>\n	<div class=\"uk-form\"" + style + ">\n		" + close + "\n		" + content + "\n	</div>\n</div>").appendTo('body').cs().modal('show').on('uk.modal.hide', function() {
          return $(this).remove();
        });
      }
    };
  })(jQuery, jQuery.UIkit);

}).call(this);
