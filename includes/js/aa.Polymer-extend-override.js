// Generated by LiveScript 1.4.0
/**
 * @package   CleverStyle CMS
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2015-2016, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  var Polymer_original, delay_registration, already_registered_modules, register_original;
  Polymer_original = Polymer;
  delay_registration = {};
  window.Polymer = (function(superclass){
    var prototype = extend$((import$(Polymer, superclass).displayName = 'Polymer', Polymer), superclass).prototype, constructor = Polymer;
    function Polymer(prototype){
      var new_prototype;
      if (delay_registration[prototype.is]) {
        new_prototype = delay_registration[prototype.is];
        if (!new_prototype.overrides) {
          new_prototype.behaviors = (prototype.behaviors || (prototype.behaviors = [])).slice().concat(new_prototype.behaviors || []);
          if (prototype['extends']) {
            new_prototype['extends'] = prototype['extends'];
          }
          delete prototype.behaviors;
          delete prototype['extends'];
          new_prototype.behaviors.unshift(prototype);
        }
        delete new_prototype.overrides;
        prototype = new_prototype;
        delete delay_registration[prototype.is];
      }
      if (prototype.is === prototype['extends']) {
        delete prototype['extends'];
        delay_registration[prototype.is] = prototype;
        return;
      }
      if (prototype.is === prototype.overrides) {
        delay_registration[prototype.is] = prototype;
        return;
      }
      Polymer_original(prototype);
    }
    prototype.__delay_registration = {};
    return Polymer;
  }(Polymer));
  already_registered_modules = {};
  register_original = Polymer.DomModule.register;
  Object.getPrototypeOf(document.createElement('dom-module')).register = function(){
    if (this.id) {
      if (already_registered_modules[this.id]) {
        return;
      }
      if (this.getAttribute('overrides') === this.id) {
        already_registered_modules[this.id] = true;
      }
    }
    register_original.call(this);
  };
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
