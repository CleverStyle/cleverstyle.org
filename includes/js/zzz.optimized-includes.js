// Generated by LiveScript 1.4.0
/**
 * @package   CleverStyle Framework
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2016, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */
(function(){
  var original_ready;
  if (!cs.optimized_includes) {
    return;
  }
  original_ready = cs.ui.ready;
  cs.ui.ready = new Promise(function(resolve){
    var content_loaded;
    content_loaded = function(){
      var imports;
      imports = document.querySelectorAll('link[rel=import]:not([async]');
      imports[imports.length - 1].addEventListener('load', resolve);
    };
    switch (document.readyState) {
    case 'complete':
      resolve();
      break;
    case 'interactive':
      content_loaded();
      break;
    default:
      addEventListener('DOMContentLoaded', content_loaded);
    }
  }).then(function(){
    var load_script, load_import, preload, promise, i$, ref$, len$, script, import_;
    load_script = function(){
      var this$ = this;
      return new Promise(function(resolve, reject){
        var x$, script;
        x$ = script = document.createElement("script");
        x$.async = true;
        x$.src = this$;
        x$.onload = resolve;
        x$.onerror = reject;
        document.head.appendChild(script);
      });
    };
    load_import = function(){
      return new Promise(Polymer.Base.importHref.bind(this, this));
    };
    preload = function(as, href){
      var x$, preload;
      x$ = preload = document.createElement("link");
      x$.rel = "preload";
      x$.as = as;
      x$.href = href;
      document.head.appendChild(preload);
    };
    promise = Promise.resolve();
    for (i$ = 0, len$ = (ref$ = cs.optimized_includes[0]).length; i$ < len$; ++i$) {
      script = ref$[i$];
      preload('script', script);
      promise = promise.then(load_script.bind(script));
    }
    for (i$ = 0, len$ = (ref$ = cs.optimized_includes[1]).length; i$ < len$; ++i$) {
      import_ = ref$[i$];
      preload('document', import_);
      promise = promise.then(load_import.bind(import_));
    }
    return promise;
  }).then(function(){
    return original_ready;
  });
}).call(this);
